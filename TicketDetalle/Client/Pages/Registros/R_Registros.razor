@page "/RegistrosTickets"
@page "/RegistrosTickets/{TicketId:int}"
@using System.Text.RegularExpressions;
@using TicketDetalle.Shared;
@inject HttpClient httpClient;

<EditForm Model="Ticket" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3 class="text-center">Registro de Tickets</h3>
            </div>
            <div class=card-body>

                @*Ticket Id:*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Ticket Id:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="Ticket.TicketId" class="form-control" aria-describedby="BotonBuscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class="oi oi-magnifying-glass" /></button>
                    </div>
                </div>

                @*Fecha:*@
                <div class="mb-3">
                    <label class="form-label" for="Fecha">Fecha:</label>
                    <InputDate @bind-Value="Ticket.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => Ticket.Fecha)" />
                </div>

                @*SolicitadoPor*@
                <div class="mb-3">
                    <label class="form-label">Solicitado Por</label>
                    <InputText @bind-Value="Ticket.SolicitadoPor" class="form-control" placeholder="Nombre del solicitante" />
                    <ValidationMessage For="@(() => Ticket.SolicitadoPor)" />
                </div>

                @*Asunto*@
                <div class="mb-3">
                    <label class="form-label">Asunto</label>
                    <InputText @bind-Value="Ticket.Asunto" class="form-control" placeholder="Asunto" />
                    <ValidationMessage For="@(() => Ticket.Asunto)" />
                </div>

                @*Descripción*@
                <div class="mb-3">
                    <label class="form-label">Descripción</label>
                    <InputText @bind-Value="Ticket.Descripcion" class="form-control" placeholder="Descripción" />
                    <ValidationMessage For="@(() => Ticket.Descripcion)" />
                </div>

                @*DETALLE*@
                <fieldset class="border-secondary border border-1">
                    <h3 class="text-center">Detalles del ticket</h3>
                    <div class="row m-1">

                        @*Emisor *@
                        <div class="mb-3">
                            <label class="form-label">Emisor</label>
                            <InputText class="form-control" @bind-Value="Emisor"></InputText>
                        </div>

                        @*Emisor *@
                        <div class="mb-3">
                            <label class="form-label">Mensaje</label>
                            <InputText class="form-control" @bind-Value="Mensaje"></InputText>
                        </div>

                        @*Boton agregar *@
                        <div class="col-2">
                            <button type="button" class="btn btn-primary input-group-text" @onclick="AgregarDetalle">
                                <span class="oi oi-plus">Agregar</span>
                            </button>
                        </div>
                    </div>

                    @*Tabla de detalles*@
                    <div class="row m-1">
                        <hr />
                        <table class="table table-bordered table-light m-1">
                            <thead class="thead">
                                <tr class="table">
                                    <th>Emisor</th>
                                    <th>Mensaje</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var detalle in Ticket.TicketsDetalle)
                                {
                                    <tr>
                                        <td>@detalle.Emisor</td>
                                        <td>@detalle.Mensaje</td>
                                        <td> <button @onclick="@(() => RemoverDetalle(detalle))"><i class="oi oi-trash" /> Eliminar</button>   </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="row justify-content-between">
                            <div class="col-4">
                                <label>Cantidad de Emisores</label>
                                <div class="input-group mb-3">
                                    <span class="form-control">@Ticket.TicketsDetalle.Count()</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </fieldset>
            </div>

            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int TicketId { get; set; }

    public Tickets Ticket { get; set; } = new TicketDetalle.Shared.Tickets();
    public IEnumerable<TicketsDetalle> TicketDetalle { get; set; } = Enumerable.Empty<TicketsDetalle>();

    public string Emisor { get; set; } = string.Empty;
    public string Mensaje { get; set; } = string.Empty;

    public string ValidacionDetalle { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (TicketId > 0)
        {
            this.Ticket.TicketId = TicketId;
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var ticketEncontrado = await httpClient.GetFromJsonAsync<Tickets>($"api/Tickets/{Ticket.TicketId}");
        if (ticketEncontrado != null)
        {
            this.Ticket = ticketEncontrado;
            StateHasChanged();
        }
        else
        {
            this.Nuevo();
        }
    }

    public async Task Guardar()
    {
        using var response = await httpClient.PostAsJsonAsync("api/Tickets", Ticket);
        if (!response.IsSuccessStatusCode)
        {

            return;
        }
        var ticketDevuelto = await response.Content.ReadFromJsonAsync<Tickets>();
        if (ticketDevuelto is not null)
        {
            Ticket = ticketDevuelto;
            StateHasChanged();
        }
    }

    public void Nuevo()
    {
        this.Ticket = new Tickets();
        // = string.Empty;
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Tickets/{Ticket.TicketId}");
        if (!response.IsSuccessStatusCode)
        {
            return;
        }
        else
            Nuevo();
    }

    public async Task AgregarDetalle()
    {
        if (ValidarDetalle())
        {
            var detalle = new TicketsDetalle
                {
                    TicketId = Ticket.TicketId,
                    Emisor = Emisor,
                    Mensaje = Mensaje
                };
            Ticket.TicketsDetalle.Add(detalle);
            Emisor = string.Empty;
            Mensaje = string.Empty;
            StateHasChanged();
        }
    }

    public void RemoverDetalle(TicketsDetalle detalleRemover)
    {
        Emisor = detalleRemover.Emisor;
        Mensaje = detalleRemover.Mensaje;
        Ticket.TicketsDetalle.Remove(detalleRemover);
    }

    public bool ValidarDetalle()
    {
        bool EsValido = true;

        if (!ValidarEmisor())
        {
            EsValido = false;
        }

        if (String.IsNullOrWhiteSpace(Mensaje))
        {
            EsValido = false;
        }
        return EsValido;
    }

    public bool ValidarEmisor()
    {
        if (String.IsNullOrWhiteSpace(Emisor))
        {

            return false;
        }

        if (!Regex.IsMatch(Emisor, @"^[A-Za-z\s]+$"))
        {
            return false;
        }
        return true;
    }
}
